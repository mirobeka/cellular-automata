// Generated by CoffeeScript 1.6.3
(function() {
  var Cell, Replay, ReplayPlayer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ReplayPlayer = (function() {
    function ReplayPlayer(width, height, resolution) {
      this.width = width;
      this.height = height;
      this.resolution = resolution;
      this.loop = __bind(this.loop, this);
      this.start = __bind(this.start, this);
      this.addCell = __bind(this.addCell, this);
      this.canvas = oCanvas.create({
        canvas: "#replayCanvas",
        background: "#eee"
      });
      this.cells = [];
      this.stepIndex = 0;
    }

    ReplayPlayer.prototype.addCell = function(size) {
      var cell;
      cell = new Cell(this.canvas, 10, 20, 20);
      return this.cells.push(cell);
    };

    ReplayPlayer.prototype.start = function(speed) {
      if (speed == null) {
        speed = 30;
      }
      this.canvas.settings.fps = speed;
      return this.canvas.setLoop(this.loop).start();
    };

    ReplayPlayer.prototype.loop = function() {
      var cell, _i, _len, _ref, _results;
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        this.stepIndex++;
        _results.push(this.replay.state(this.stepIndex, cell));
      }
      return _results;
    };

    return ReplayPlayer;

  })();

  Replay = (function() {
    function Replay(jsonData) {
      this.jsonData = jsonData;
      this.setState = __bind(this.setState, this);
      console.log("Hello there! Replay reporting for duty");
      console.log("I have following data");
      console.log(this.jsonData);
    }

    Replay.prototype.setState = function(stepIndex, cell) {
      var rgb;
      rgb = "rbg(" + this.jsonData[strepIndex] + ", " + this.jsonData[strepIndex] + ", " + this.jsonData[strepIndex];
      return cell.setColor(rgb);
    };

    return Replay;

  })();

  Cell = (function() {
    function Cell(parent, size, x, y) {
      this.parent = parent;
      this.size = size;
      this.x = x;
      this.y = y;
      this.setColor = __bind(this.setColor, this);
      this.rectangle = this.parent.display.rectange({
        x: this.x,
        y: this.y,
        origin: {
          x: "center",
          y: "center"
        },
        width: this.size,
        height: this.size,
        stroke: "#999",
        fill: "#aaa"
      }).add();
    }

    Cell.prototype.setColor = function(color) {
      return this.rectangle.fill(color);
    };

    return Cell;

  })();

  $(document).ready(function() {
    var player;
    new FormSubmitter(".ui.update.form", "PUT", ".", function(response) {
      return window.location.assign(response);
    });
    new FormSubmitter(".ui.delete.form", "DELETE", ".", function(response) {
      return window.location.assign(response);
    });
    player = new ReplayPlayer(20, 100, 100);
    console.log("adding cell");
    player.addCell(100);
    return player.start(100);
  });

}).call(this);
