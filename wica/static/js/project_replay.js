// Generated by CoffeeScript 1.6.3
(function() {
  var Preview, ReplayPlayer, recordReplay, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.displayValues = false;

  Preview = (function() {
    function Preview(replay) {
      this.replay = replay;
      this.draw = __bind(this.draw, this);
      this.show = __bind(this.show, this);
      this.clear = __bind(this.clear, this);
      this.map_state_to_color = __bind(this.map_state_to_color, this);
      this.size = 20;
      this.resolution = 10;
      this.canvas = $("#preview").get(0);
      this.canvas.height = this.size * this.resolution * 3 + 65;
      this.canvas.width = this.size * this.resolution * 3 + 22;
      this.ctx = this.canvas.getContext("2d");
      this.ctx.font = "12px courier new";
    }

    Preview.prototype.map_state_to_color = function(state) {
      if ("rgb" in state) {
        return state.rgb;
      } else if ("grayscale" in state) {
        return [state.grayscale, state.grayscale, state.grayscale];
      }
    };

    Preview.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    Preview.prototype.show = function() {
      var height, idx, scale, step, steps, width, x, xx, yy, _i, _len, _results;
      scale = d3.scale.linear().range([0, this.replay.data.length - 1]).domain([0, 9]);
      steps = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 0; _i <= 8; x = ++_i) {
          _results.push(Math.round(scale(x)));
        }
        return _results;
      })();
      width = this.size * this.resolution;
      height = this.size * this.resolution;
      _results = [];
      for (idx = _i = 0, _len = steps.length; _i < _len; idx = ++_i) {
        step = steps[idx];
        xx = 1 + width * (idx % 3) + 5 * (idx % 3);
        yy = 18 + Math.floor(idx / 3) * height + 18 * Math.floor(idx / 3);
        _results.push(this.draw(xx, yy, step));
      }
      return _results;
    };

    Preview.prototype.draw = function(xx, yy, step) {
      var idx, rgb, state, text, x, y, _i, _len, _ref, _results;
      this.ctx.fillStyle = "black";
      text = "step: " + step;
      this.ctx.fillText(text, xx, yy - 6);
      this.ctx.fillRect(xx - 1, yy - 1, this.size * this.resolution + 2, this.size * this.resolution + 2);
      _ref = this.replay.data[step];
      _results = [];
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        state = _ref[idx];
        rgb = this.map_state_to_color(state);
        this.ctx.fillStyle = "rgb(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")";
        x = (idx % this.size) * this.resolution;
        y = Math.floor(idx / this.size) * this.resolution;
        _results.push(this.ctx.fillRect(xx + x, yy + y, this.resolution, this.resolution));
      }
      return _results;
    };

    return Preview;

  })();

  ReplayPlayer = (function() {
    function ReplayPlayer(replay) {
      this.replay = replay;
      this.start = __bind(this.start, this);
      this.stop = __bind(this.stop, this);
      this.fastForward = __bind(this.fastForward, this);
      this.forward = __bind(this.forward, this);
      this.fastBackward = __bind(this.fastBackward, this);
      this.backward = __bind(this.backward, this);
      this.pause = __bind(this.pause, this);
      this.update = __bind(this.update, this);
      this.updateStats = __bind(this.updateStats, this);
      this.clearStats = __bind(this.clearStats, this);
      this.draw = __bind(this.draw, this);
      this.map_state_to_color = __bind(this.map_state_to_color, this);
      this.clear = __bind(this.clear, this);
      this.queue = __bind(this.queue, this);
      this.loop = __bind(this.loop, this);
      this.slowDown = __bind(this.slowDown, this);
      this.speedUp = __bind(this.speedUp, this);
      this.unbindAll = __bind(this.unbindAll, this);
      this.initControls = __bind(this.initControls, this);
      this.canvas = $("#replayCanvas").get(0);
      this.ctx = this.canvas.getContext("2d");
      this.canvas.width = this.replay.width * this.replay.resolution;
      this.canvas.height = this.replay.height * this.replay.resolution;
      this.fps = 10;
      this.step = 0;
    }

    ReplayPlayer.prototype.initControls = function() {
      $(".playButton").parent().bind("click", this.start);
      $(".pauseButton").parent().bind("click", this.pause);
      $(".stopButton").parent().bind("click", this.stop);
      $(".forwardButton").parent().bind("click", this.forward);
      $(".fastForwardButton").parent().bind("click", this.fastForward);
      $(".backwardButton").parent().bind("click", this.backward);
      $(".fastBackwardButton").parent().bind("click", this.fastBackward);
      $(".speedUp").parent().bind("click", this.speedUp);
      return $(".slowDown").parent().bind("click", this.slowDown);
    };

    ReplayPlayer.prototype.unbindAll = function() {
      console.log("unbinding");
      $(".playButton").parent().unbind("click", this.start);
      $(".pauseButton").parent().unbind("click", this.pause);
      $(".stopButton").parent().unbind("click", this.stop);
      $(".forwardButton").parent().unbind("click", this.forward);
      $(".fastForwardButton").parent().unbind("click", this.fastForward);
      $(".backwardButton").parent().unbind("click", this.backward);
      $(".fastBackwardButton").parent().unbind("click", this.fastBackward);
      $(".speedUp").parent().unbind("click", this.speedUp);
      return $(".slowDown").parent().unbind("click", this.slowDown);
    };

    ReplayPlayer.prototype.speedUp = function() {
      this.fps += 2;
      return this.updateStats();
    };

    ReplayPlayer.prototype.slowDown = function() {
      if (!(this.fps <= 2)) {
        this.fps -= 2;
      }
      return this.updateStats();
    };

    ReplayPlayer.prototype.loop = function() {
      if (!this.running) {
        return;
      }
      this.clear();
      this.update();
      return this.queue();
    };

    ReplayPlayer.prototype.queue = function() {
      var drawTimeout, nextFrame,
        _this = this;
      nextFrame = function() {
        return window.requestAnimationFrame(_this.loop);
      };
      drawTimeout = 1000 / this.fps;
      return window.setTimeout(nextFrame, drawTimeout);
    };

    ReplayPlayer.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    ReplayPlayer.prototype.map_state_to_color = function(state) {
      if ("rgb" in state) {
        return state.rgb;
      } else if ("grayscale" in state) {
        return [state.grayscale, state.grayscale, state.grayscale];
      }
    };

    ReplayPlayer.prototype.draw = function(replay) {
      var idx, l, r, rgb, state, text, x, y, _i, _len, _ref, _results;
      _ref = this.replay.data[this.step];
      _results = [];
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        state = _ref[idx];
        rgb = this.map_state_to_color(state);
        this.ctx.fillStyle = "rgb(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")";
        x = (idx % this.replay.width) * this.replay.resolution;
        y = Math.floor(idx / this.replay.height) * this.replay.resolution;
        this.ctx.fillRect(x, y, this.replay.resolution, this.replay.resolution);
        if (root.displayValues) {
          this.ctx.font = "" + (this.replay.resolution / 2) + "px courier new";
          this.ctx.fillStyle = "black";
          if ((rgb[0] + rgb[1] + rgb[2]) / 3 < 128) {
            this.ctx.fillStyle = "white";
          }
          text = "" + (Math.round(state["state"] * 10) / 10);
          l = text.length * this.replay.resolution / 2;
          r = this.replay.resolution / 2;
          _results.push(this.ctx.fillText(text, x + r - l / 3, y + r * 1.5));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ReplayPlayer.prototype.clearStats = function() {
      return $('.frame').text("0/0");
    };

    ReplayPlayer.prototype.updateStats = function() {
      $('.frame').text("" + this.step + "/" + this.replay.data.length);
      return $('.fps').text("" + this.fps);
    };

    ReplayPlayer.prototype.update = function() {
      if (this.step >= this.replay.data.length) {
        this.stop();
        return;
      }
      this.draw(this.replay);
      this.updateStats();
      return this.step++;
    };

    ReplayPlayer.prototype.pause = function() {
      console.log("pause");
      if (this.running) {
        return this.running = false;
      }
    };

    ReplayPlayer.prototype.backward = function() {
      this.pause();
      this.step--;
      this.draw(this.replay);
      return this.updateStats();
    };

    ReplayPlayer.prototype.fastBackward = function() {
      this.pause();
      this.step = 0;
      this.draw(this.replay);
      return this.updateStats();
    };

    ReplayPlayer.prototype.forward = function() {
      this.pause();
      this.step++;
      this.draw(this.replay);
      return this.updateStats();
    };

    ReplayPlayer.prototype.fastForward = function() {
      this.pause();
      this.step = this.replay.data.length - 1;
      this.draw(this.replay);
      return this.updateStats();
    };

    ReplayPlayer.prototype.stop = function() {
      this.clear();
      this.running = false;
      this.step = 0;
      return this.updateStats();
    };

    ReplayPlayer.prototype.start = function() {
      console.log("start");
      this.running = true;
      return window.requestAnimationFrame(this.loop);
    };

    return ReplayPlayer;

  })();

  recordReplay = function(event) {
    return $.ajax({
      type: "POST",
      data: {
        "replay": "true"
      },
      url: ".",
      success: function(response) {
        return console.log(response);
      }
    });
  };

  $(document).ready(function() {
    var foo, hmm, loadReplayData, otherFoo;
    $(".ui.dimmable").dimmer({
      duration: {
        show: 300,
        hide: 700
      }
    });
    $('.ui.checkbox').checkbox().on('click', function() {
      root.displayValues = !root.displayValues;
      return root.player.draw();
    });
    loadReplayData = function(replayName, callback) {
      return $.ajax({
        type: "GET",
        url: "../replay/" + replayName + "/",
        success: callback
      });
    };
    otherFoo = function(replayData) {
      replayData = JSON.parse(replayData);
      root.player = new ReplayPlayer(replayData);
      root.preview = new Preview(replayData);
      root.preview.show();
      root.player.initControls();
      root.player.updateStats();
      root.player.draw();
      return $(".ui.dimmable").dimmer("hide");
    };
    foo = function(event) {
      var replayName;
      if (root.player != null) {
        root.player.stop();
        root.player.unbindAll();
      }
      $(".ui.dimmable").dimmer("show");
      replayName = $(this).attr("data-name");
      return loadReplayData(replayName, otherFoo);
    };
    hmm = $('a.load.replay').bind('click', foo);
    return $('.recordReplay').bind('click', recordReplay);
  });

}).call(this);
