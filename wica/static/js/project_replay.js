// Generated by CoffeeScript 1.6.3
(function() {
  var ReplayPlayer, recordReplay, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  ReplayPlayer = (function() {
    function ReplayPlayer(replay) {
      this.replay = replay;
      this.start = __bind(this.start, this);
      this.stop = __bind(this.stop, this);
      this.pause = __bind(this.pause, this);
      this.queue = __bind(this.queue, this);
      this.update = __bind(this.update, this);
      this.clear = __bind(this.clear, this);
      this.loop = __bind(this.loop, this);
      this.initControls = __bind(this.initControls, this);
      this.canvas = $("#replayCanvas").get(0);
      this.ctx = this.canvas.getContext("2d");
      this.canvas.width = this.replay.width * this.replay.resolution;
      this.canvas.height = this.replay.height * this.replay.resolution;
      this.step = 0;
    }

    ReplayPlayer.prototype.initControls = function() {
      $(".play.icon").parent().bind("click", this.start);
      $(".pause.icon").parent().bind("click", this.pause);
      return $(".stop.icon").parent().bind("click", this.stop);
    };

    ReplayPlayer.prototype.loop = function() {
      if (!this.running) {
        return;
      }
      this.clear();
      this.update();
      return this.queue();
    };

    ReplayPlayer.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    ReplayPlayer.prototype.update = function() {
      var idx, rgb, state, x, y, _i, _len, _ref;
      if (this.step >= this.replay.length) {
        this.stop();
        return;
      }
      _ref = this.replay.data[this.step];
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        state = _ref[idx];
        rgb = state.rgb;
        this.ctx.fillStyle = "rgb(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")";
        x = (idx % this.replay.width) * this.replay.resolution;
        y = Math.floor(idx / this.replay.height) * this.replay.resolution;
        this.ctx.fillRect(x, y, this.replay.resolution, this.replay.resolution);
      }
      return this.step++;
    };

    ReplayPlayer.prototype.queue = function() {
      var nextFrame,
        _this = this;
      nextFrame = function() {
        return window.requestAnimationFrame(_this.loop);
      };
      return window.setTimeout(nextFrame, 100);
    };

    ReplayPlayer.prototype.pause = function() {
      console.log("pause");
      if (this.running) {
        return this.running = false;
      } else {
        this.running = true;
        return window.requestAnimationFrame(this.loop);
      }
    };

    ReplayPlayer.prototype.stop = function() {
      this.clear();
      this.running = false;
      return this.step = 0;
    };

    ReplayPlayer.prototype.start = function() {
      console.log("start");
      this.running = true;
      return window.requestAnimationFrame(this.loop);
    };

    return ReplayPlayer;

  })();

  $(document).ready(function() {
    var foo, hmm, loadReplayData, otherFoo;
    $(".ui.dimmable").dimmer({
      duration: {
        show: 300,
        hide: 700
      }
    });
    loadReplayData = function(replayName, callback) {
      return $.ajax({
        type: "GET",
        url: "../replay/" + replayName + "/",
        success: callback
      });
    };
    otherFoo = function(replayData) {
      var hideDimmer, player;
      console.log("callback with data from server");
      console.log(replayData);
      console.log("parsing data");
      replayData = JSON.parse(replayData);
      console.log("parsed data");
      console.log(replayData);
      console.log("Creating new ReplayPlayer");
      player = new ReplayPlayer(replayData);
      console.log(player);
      console.log("initializing controls");
      player.initControls();
      $(".ui.dimmable").dimmer("show");
      hideDimmer = function() {
        return $(".ui.dimmable").dimmer("hide");
      };
      return window.setTimeout(hideDimmer, 1000);
    };
    foo = function(event) {
      var jsonData, replayName;
      console.log("getting data from server");
      replayName = $(this).attr("data-name");
      return jsonData = loadReplayData(replayName, otherFoo);
    };
    return hmm = $('a.load.replay').bind('click', foo);
  });

  recordReplay = function(event) {
    return $.ajax({
      type: "POST",
      data: {
        "replay": "true"
      },
      url: ".",
      success: function(response) {
        return console.log(response);
      }
    });
  };

  $(document).ready(function() {
    return $('.recordReplay').bind('click', recordReplay);
  });

}).call(this);
